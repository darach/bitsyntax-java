// Copyright (c) 2013 Darach Ennis < darach at gmail dot com >.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:  
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


package io.darach.bitsyntax;

import java.util.Map;
import java.util.concurrent.atomic.AtomicLong;

import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.FieldVisitor;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;

import static org.objectweb.asm.Opcodes.*;
import static io.darach.bitsyntax.BitSyntaxParser.*;
import static io.darach.bitsyntax.BitSyntaxHelper.*;

public class BitSyntaxBytecodePrinter implements BitSyntaxVisitor {
	private static AtomicLong counter = new AtomicLong();
	private final long invocationCount = counter.incrementAndGet();
	private String sourceText;
	
	// defaults
	private String packageName = "bitsyntax.generated";
	private String clazzNameStub = "Expr";
	private String clazzName;
	
	
	private ClassWriter cw = new ClassWriter(0);
	private MethodVisitor mv;
	private FieldVisitor fv;
	private int storeIndex = 8;
	
	@SuppressWarnings("unused") // @NOTE Used in generated bytecode
	private Map<String,Integer> binding = null;

	// For ASM
	private String fqcn;
	
	// For Reflection
	private String rflx;
	private String expansionText;
	
	public void setPackageName(final String packageName) {
		this.packageName = packageName;
	}

	public void setSource(final String sourceText) {
		this.sourceText = sourceText;
	}
	
	public void setExpansion(final String expansionText) {
		this.expansionText = expansionText;
	}

	public void setClassName(String clazzNameStub) {
		this.clazzNameStub = clazzNameStub;
		clazzName = this.clazzNameStub + invocationCount;
		fqcn = packageName.replace('.', '/') + '/' + clazzName;
		rflx = packageName + "." + clazzName;
	}
	
	public void setBinding(final Map<String,Integer> binding) {
		this.binding = binding;
	}

	public void prologue() {
		// Create BitSyntax class
		cw.visit(V1_6, ACC_PUBLIC + ACC_FINAL + ACC_SUPER, fqcn, null, "io/darach/bitsyntax/AbstractBitPattern", null);
		
		// Freeze in source text
		fv = cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC, "SOURCE", "Ljava/lang/String;", null, sourceText);
		fv.visitEnd();
	
		// Freeze in expansion text
		fv = cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC, "EXPANSION", "Ljava/lang/String;", null, expansionText);
		fv.visitEnd();
		
		// Default ctor
		mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
		mv.visitCode();
		mv.visitVarInsn(ALOAD, 0);
		mv.visitMethodInsn(INVOKESPECIAL, "io/darach/bitsyntax/AbstractBitPattern", "<init>", "()V");
		mv.visitInsn(RETURN);
		mv.visitMaxs(1, 1);
		mv.visitEnd();
		
		// CG hook
		mv = cw.visitMethod(ACC_PUBLIC, "generated", "([BLjava/util/Map;)Ljava/util/Map;", "([BLjava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;)Ljava/util/Map<Ljava/lang/String;[B>;", null);
		mv.visitCode();
		mv.visitTypeInsn(NEW, "java/util/HashMap");
		mv.visitInsn(DUP);
		mv.visitMethodInsn(INVOKESPECIAL, "java/util/HashMap", "<init>", "()V");
		mv.visitVarInsn(ASTORE, 3);
		mv.visitVarInsn(ALOAD, 0);
		mv.visitVarInsn(ALOAD, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(IFNULL, l0);
		mv.visitVarInsn(ALOAD, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(GOTO, l1);
		mv.visitLabel(l0);
		mv.visitFrame(F_FULL, 4, new Object[] { fqcn, "[B", "java/util/Map", "java/util/Map"}, 1, new Object[] { fqcn});
		mv.visitTypeInsn(NEW, "java/util/HashMap");
		mv.visitInsn(DUP);
		mv.visitMethodInsn(INVOKESPECIAL, "java/util/HashMap", "<init>", "()V");
		mv.visitLabel(l1);
		mv.visitFrame(F_FULL, 4, new Object[] {fqcn, "[B", "java/util/Map", "java/util/Map"}, 2, new Object[] {fqcn, "java/util/Map"});
		mv.visitFieldInsn(PUTFIELD, fqcn, "scope", "Ljava/util/Map;");
		mv.visitInsn(ICONST_0);
		mv.visitVarInsn(ISTORE, 4);
		mv.visitInsn(ICONST_0);
		mv.visitVarInsn(ISTORE, 5);
		mv.visitVarInsn(ALOAD, 1);
		mv.visitInsn(ARRAYLENGTH);
		mv.visitIntInsn(BIPUSH, 8);
		mv.visitInsn(IMUL);
		mv.visitVarInsn(ISTORE, 6);
		mv.visitInsn(ACONST_NULL);
		mv.visitVarInsn(ASTORE, 7);		
	}

	@Override
	public void skipSegment(SegmentContext segment) {
		int bitsToSkip = Integer.parseInt(segment.size().NM().getText());
		mv.visitVarInsn(ILOAD, bitsToSkip);
		mv.visitInsn(ICONST_4);
		mv.visitInsn(IADD);
		mv.visitVarInsn(ILOAD, 6);
		Label l3 = new Label();
		mv.visitJumpInsn(IF_ICMPLE, l3);
		mv.visitTypeInsn(NEW, "io/darach/bitsyntax/BitSyntaxException");
		mv.visitInsn(DUP);
		mv.visitLdcInsn("Actual vs expected size mismatch");
		mv.visitMethodInsn(INVOKESPECIAL, "io/darach/bitsyntax/BitSyntaxException", "<init>", "(Ljava/lang/String;)V");
		mv.visitInsn(ATHROW);
		mv.visitLabel(l3);
		mv.visitFrame(F_SAME, 0, null, 0, null);
		mv.visitIincInsn(4, bitsToSkip);
	}

	@Override
	public void numberSegment(SegmentContext segment) {
		mv.visitInsn(ACONST_NULL);
		mv.visitVarInsn(ASTORE, 7);
		mv.visitVarInsn(ILOAD, 4);
		mv.visitVarInsn(ISTORE, 5);
		if (segment.size() == null) {
			// @TODO Enforce last segment rule. last segment only can have no (variable) size
			mv.visitInsn(ACONST_NULL);
			mv.visitVarInsn(ASTORE, 7);
			mv.visitVarInsn(ILOAD, 4);
			mv.visitVarInsn(ISTORE, 5);
			mv.visitVarInsn(ILOAD, 6);
			mv.visitVarInsn(ISTORE, 4);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitVarInsn(ILOAD, 5);
			mv.visitVarInsn(ILOAD, 4);
			mv.visitVarInsn(ILOAD, 5);
			mv.visitInsn(ISUB);
			mv.visitMethodInsn(INVOKESTATIC, "io/darach/bitsyntax/BitHelper", "bitgrok", "([BII)[B");
			mv.visitVarInsn(ASTORE, 7);
			mv.visitVarInsn(ALOAD, 3);
			if (segment.ID() != null) {
				mv.visitLdcInsn(segment.ID().getText());
				mv.visitVarInsn(ALOAD, 7);
				mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
			}
			mv.visitInsn(POP);
		} else {
			int s = sizeof(null, segment.size()) * unit(segment).size;
			mv.visitVarInsn(ILOAD, 4);
			mv.visitVarInsn(ILOAD, 6);
			mv.visitIincInsn(4, s);
			bitgrok_with_size(segment);
		}
//		}
	}

	@Override
	public void binarySegment(SegmentContext segment) {
		mv.visitInsn(ACONST_NULL);
		mv.visitVarInsn(ASTORE, 7);
		mv.visitVarInsn(ILOAD, 4);
		mv.visitVarInsn(ISTORE, 5);
		if (segment.size() == null) {
			// @TODO Enforce last segment rule. last segment only can have no (variable) size
			mv.visitInsn(ACONST_NULL);
			mv.visitVarInsn(ASTORE, 7);
			mv.visitVarInsn(ILOAD, 4);
			mv.visitVarInsn(ISTORE, 5);
			mv.visitVarInsn(ILOAD, 6);
			mv.visitVarInsn(ISTORE, 4);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitVarInsn(ILOAD, 5);
			mv.visitVarInsn(ILOAD, 4);
			mv.visitVarInsn(ILOAD, 5);
			mv.visitInsn(ISUB);
			mv.visitMethodInsn(INVOKESTATIC, "io/darach/bitsyntax/BitHelper", "bitgrok", "([BII)[B");
			mv.visitVarInsn(ASTORE, 7);
			mv.visitVarInsn(ALOAD, 3);
		} else {
			int s = sizeof(null, segment.size()) * unit(segment).size;
			mv.visitVarInsn(ILOAD, 4);
			mv.visitVarInsn(ILOAD, 6);
			mv.visitIincInsn(4, s);
			bitgrok_with_size(segment);
		}
//		}
	}

	private void bitgrok_with_size(SegmentContext segment) {
		Label l4 = new Label();
		mv.visitJumpInsn(IF_ICMPLE, l4);
		mv.visitTypeInsn(NEW, "io/darach/bitsyntax/BitSyntaxException");
		mv.visitInsn(DUP);
		mv.visitLdcInsn("Actual vs expected size mismatch");
		mv.visitMethodInsn(INVOKESPECIAL, "io/darach/bitsyntax/BitSyntaxException", "<init>", "(Ljava/lang/String;)V");
		mv.visitInsn(ATHROW);
		mv.visitLabel(l4);
		mv.visitFrame(F_SAME, 0, null, 0, null);
		mv.visitVarInsn(ALOAD, 1);
		mv.visitVarInsn(ILOAD, 5);
		mv.visitVarInsn(ILOAD, 4);
		mv.visitVarInsn(ILOAD, 5);
		mv.visitInsn(ISUB);
		mv.visitMethodInsn(INVOKESTATIC, "io/darach/bitsyntax/BitHelper", "bitgrok", "([BII)[B");
		mv.visitVarInsn(ASTORE, 7);
		mv.visitVarInsn(ALOAD, 3);
		if (hasLabel(segment)) {
			mv.visitLdcInsn(label(segment));
			mv.visitVarInsn(ALOAD, 7);
			mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
		}
		mv.visitInsn(POP);
	}

	@Override
	public void stringSegment(SegmentContext segment) {
		int size = segment.QS().getText().length() - 2;
		
		System.out.println("String Segment size: " + size);
		
		mv.visitInsn(ACONST_NULL);
		mv.visitVarInsn(ASTORE, 7);
		mv.visitVarInsn(ILOAD, 4);
		mv.visitVarInsn(ISTORE, 5);
		mv.visitIincInsn(4, size * unit(segment).size);
		mv.visitVarInsn(ILOAD, 4);
		mv.visitVarInsn(ILOAD, 6);
		Label l2 = new Label();
		mv.visitJumpInsn(IF_ICMPLE, l2);
		mv.visitTypeInsn(NEW, "io/darach/bitsyntax/BitSyntaxException");
		mv.visitInsn(DUP);
		mv.visitLdcInsn("Actual vs expected size mismatch");
		mv.visitMethodInsn(INVOKESPECIAL, "io/darach/bitsyntax/BitSyntaxException", "<init>", "(Ljava/lang/String;)V");
		mv.visitInsn(ATHROW);
		mv.visitLabel(l2);
		mv.visitFrame(F_FULL, 8, new Object[] { fqcn, "[B", "java/util/Map", "java/util/Map", INTEGER, INTEGER, INTEGER, "[B"}, 0, new Object[] {});
		mv.visitVarInsn(ALOAD, 1);
		mv.visitVarInsn(ILOAD, 5);
		mv.visitVarInsn(ILOAD, 4);
		mv.visitVarInsn(ILOAD, 5);
		mv.visitInsn(ISUB);
		mv.visitMethodInsn(INVOKESTATIC, "io/darach/bitsyntax/BitHelper", "bitgrok", "([BII)[B");
		mv.visitVarInsn(ASTORE, 7);
	}

	@Override
	public void epilogue() {
		mv.visitVarInsn(ALOAD, 3);
		mv.visitInsn(ARETURN);
		mv.visitMaxs(4, storeIndex);
		mv.visitEnd();
		
		mv = cw.visitMethod(ACC_PUBLIC, "specification", "()Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitLdcInsn(sourceText);
		mv.visitInsn(ARETURN);
		mv.visitMaxs(1, 1);
		mv.visitEnd();
		
		mv = cw.visitMethod(ACC_PUBLIC, "expansion", "()Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitLdcInsn(expansionText);
		mv.visitInsn(ARETURN);
		mv.visitMaxs(1, 1);
		mv.visitEnd();
		
		cw.visitEnd();
	}
	
    private static int sizeof(MethodVisitor mv, BitSyntaxParser.SizeContext size) {
    	if (size.NM() != null) {
    		return Integer.parseInt(size.NM().getText());
    	} else {
    		if (size.ID() != null) {
    			throw new IllegalStateException("Cannot establish size of variable reference");
    		} else
    			return 8; // 8 bits / byte
    	}
    }


	 private static Class<?> loadClass(String clazzName, ClassLoader cl, byte[] clazzBytes) {
		Class<?> clazz = null;
		try {
		  Class<?> cls = Class.forName("java.lang.ClassLoader");
		  java.lang.reflect.Method method =
		    cls.getDeclaredMethod("defineClass", new Class[] { String.class, byte[].class, int.class, int.class });
		
		  // protected method invocaton
		      method.setAccessible(true);
		      try {
		        Object[] args = new Object[] { clazzName, clazzBytes, new Integer(0), new Integer(clazzBytes.length)};
		        clazz = (Class<?>) method.invoke(ClassLoader.getSystemClassLoader(), args);
		      } finally {
		        method.setAccessible(false);
		      }
		    } catch (Exception e) {
		      e.printStackTrace();
		      System.exit(1);
		    }
		    return clazz;
		  }
	 
	public BitPattern load() throws InstantiationException, IllegalAccessException {
		return (BitPattern)(loadClass(rflx, Thread.currentThread().getContextClassLoader(), cw.toByteArray()).newInstance());
	}
}
